{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Thinkful\\\\qualified-exercises\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\FocusTimer.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction FocusTimer({\n  focusInterval,\n  breakInterval,\n  isTimerRunning,\n  timer,\n  setTimer\n}) {\n  const [width, setWidth] = useState({\n    width: \"0%\",\n    display: \"block\"\n  });\n  const [ariaValueNow, setAriaValueNow] = useState(0);\n  console.log(focusInterval);\n  console.log(timer);\n  useInterval(() => {\n    setTimer(timer - 1);\n    setWidth({\n      width: `${[width] + 1}%`,\n      display: \"block\"\n    });\n    setAriaValueNow(ariaValueNow + 1);\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"Focusing for \", focusInterval, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, secondsToDuration(timer), \" remaining\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, isTimerRunning ? null : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, \"PAUSED\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": ariaValueNow // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: width // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default FocusTimer;","map":{"version":3,"sources":["C:/Users/micha/Thinkful/qualified-exercises/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/FocusTimer.js"],"names":["React","useState","useInterval","secondsToDuration","FocusTimer","focusInterval","breakInterval","isTimerRunning","timer","setTimer","width","setWidth","display","ariaValueNow","setAriaValueNow","console","log","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,aADkB;AAElBC,EAAAA,aAFkB;AAGlBC,EAAAA,cAHkB;AAIlBC,EAAAA,KAJkB;AAKlBC,EAAAA;AALkB,CAApB,EAMG;AAED,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AAACS,IAAAA,KAAK,EAAE,IAAR;AAAcE,IAAAA,OAAO,EAAE;AAAvB,GAAD,CAAlC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,CAAD,CAAhD;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACAN,EAAAA,WAAW,CACT,MAAM;AACJO,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAG,IAAAA,QAAQ,CAAC;AAACD,MAAAA,KAAK,EAAG,GAAE,CAACA,KAAD,IAAU,CAAE,GAAvB;AAA2BE,MAAAA,OAAO,EAAE;AAApC,KAAD,CAAR;AACAE,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACD,GALQ,EAMTN,cAAc,GAAG,IAAH,GAAU,IANf,CAAX;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBF,aADhB,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CAACK,KAAD,CADpB,eANF,CADF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACID,cAAc,GACf,IADe,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFV,CAXF,eAeI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeJ,YALjB,CAK+B;AAL/B;AAME,IAAA,KAAK,EAAEH,KANT,CAMgB;AANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAfJ,CADF;AAgCD;;AAED,eAAeN,UAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction FocusTimer({\r\n  focusInterval,\r\n  breakInterval,\r\n  isTimerRunning,\r\n  timer,\r\n  setTimer,\r\n}) {\r\n\r\n  const [width, setWidth] = useState({width: \"0%\", display: \"block\"})\r\n  const [ariaValueNow, setAriaValueNow] = useState(0)\r\n  console.log(focusInterval);\r\n  console.log(timer);\r\n  useInterval(\r\n    () => {\r\n      setTimer(timer - 1)\r\n      setWidth({width: `${[width] + 1}%`, display: \"block\"});\r\n      setAriaValueNow(ariaValueNow + 1);\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n  return (\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n        <h2 data-testid=\"session-title\">\r\n          Focusing for {focusInterval} minutes\r\n        </h2>\r\n        {/* TODO: Update message below to include time remaining in the current session */}\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n          {secondsToDuration(timer)} remaining\r\n        </p>\r\n      </div>\r\n      <div>\r\n         {isTimerRunning ? \r\n         null : <h3>PAUSED</h3>}\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={ariaValueNow} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={width} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusTimer;\r\n"]},"metadata":{},"sourceType":"module"}