{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Thinkful\\\\qualified-exercises\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\FocusTimer.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction FocusTimer({\n  focusInterval,\n  breakInterval,\n  isTimerRunning,\n  timer,\n  setTimer\n}) {\n  const [width, setWidth] = useState({\n    width: \"0%\"\n  });\n  const [ariaValueNow, setAriaValueNow] = useState(0);\n  console.log(focusInterval);\n  console.log(timer);\n  useInterval(() => {\n    setTimer(timer - 1);\n    setWidth({\n      width: `${[width] + 1}%`\n    });\n    setAriaValueNow(ariaValueNow + 1);\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"Focusing for \", focusInterval, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, secondsToDuration(timer), \" remaining\")));\n}\n\nexport default FocusTimer;","map":{"version":3,"sources":["C:/Users/micha/Thinkful/qualified-exercises/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/FocusTimer.js"],"names":["React","useState","useInterval","secondsToDuration","FocusTimer","focusInterval","breakInterval","isTimerRunning","timer","setTimer","width","setWidth","ariaValueNow","setAriaValueNow","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,aADkB;AAElBC,EAAAA,aAFkB;AAGlBC,EAAAA,cAHkB;AAIlBC,EAAAA,KAJkB;AAKlBC,EAAAA;AALkB,CAApB,EAMG;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AAAES,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,CAAD,CAAhD;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYV,aAAZ;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAN,EAAAA,WAAW,CACT,MAAM;AACJO,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAG,IAAAA,QAAQ,CAAC;AAAED,MAAAA,KAAK,EAAG,GAAE,CAACA,KAAD,IAAU,CAAE;AAAxB,KAAD,CAAR;AACAG,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACD,GALQ,EAMTL,cAAc,GAAG,IAAH,GAAU,IANf,CAAX;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBF,aADhB,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CAACK,KAAD,CADpB,eANF,CADF,CADF;AAcD;;AAED,eAAeJ,UAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction FocusTimer({\r\n  focusInterval,\r\n  breakInterval,\r\n  isTimerRunning,\r\n  timer,\r\n  setTimer,\r\n}) {\r\n  const [width, setWidth] = useState({ width: \"0%\" });\r\n  const [ariaValueNow, setAriaValueNow] = useState(0);\r\n  console.log(focusInterval);\r\n  console.log(timer);\r\n  useInterval(\r\n    () => {\r\n      setTimer(timer - 1);\r\n      setWidth({ width: `${[width] + 1}%` });\r\n      setAriaValueNow(ariaValueNow + 1);\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n  return (\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n        <h2 data-testid=\"session-title\">\r\n          Focusing for {focusInterval} minutes\r\n        </h2>\r\n        {/* TODO: Update message below to include time remaining in the current session */}\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n          {secondsToDuration(timer)} remaining\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusTimer;\r\n"]},"metadata":{},"sourceType":"module"}